/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LandingImport } from './routes/_landing'
import { Route as IndexImport } from './routes/index'
import { Route as OnboardingExtensionIndexImport } from './routes/onboarding/extension/index'

// Create/Update Routes

const LandingRoute = LandingImport.update({
  id: '/_landing',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingExtensionIndexRoute = OnboardingExtensionIndexImport.update({
  id: '/onboarding/extension/',
  path: '/onboarding/extension/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_landing': {
      id: '/_landing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/onboarding/extension/': {
      id: '/onboarding/extension/'
      path: '/onboarding/extension'
      fullPath: '/onboarding/extension'
      preLoaderRoute: typeof OnboardingExtensionIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LandingRoute
  '/onboarding/extension': typeof OnboardingExtensionIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LandingRoute
  '/onboarding/extension': typeof OnboardingExtensionIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_landing': typeof LandingRoute
  '/onboarding/extension/': typeof OnboardingExtensionIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/onboarding/extension'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/onboarding/extension'
  id: '__root__' | '/' | '/_landing' | '/onboarding/extension/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LandingRoute: typeof LandingRoute
  OnboardingExtensionIndexRoute: typeof OnboardingExtensionIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LandingRoute: LandingRoute,
  OnboardingExtensionIndexRoute: OnboardingExtensionIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_landing",
        "/onboarding/extension/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_landing": {
      "filePath": "_landing.tsx"
    },
    "/onboarding/extension/": {
      "filePath": "onboarding/extension/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
