/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LRouteImport } from './routes/_l'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocsIndexRouteImport } from './routes/docs/index'
import { Route as DocsLRouteImport } from './routes/docs/_l'
import { Route as DocsLNotfoundRouteImport } from './routes/docs/_l.$notfound'
import { Route as LBlogLRouteImport } from './routes/_l.blog/_l'
import { Route as LOnboardingExtensionIndexRouteImport } from './routes/_l.onboarding/extension/index'
import { Route as LBlogLIndexRouteImport } from './routes/_l.blog/_l.index'
import { Route as DocsLSectionSubsectionRouteImport } from './routes/docs/_l.$section.$subsection'
import { Route as LBlogLSlugRouteImport } from './routes/_l.blog/_l.$slug'

const DocsRouteImport = createFileRoute('/docs')()
const LBlogRouteImport = createFileRoute('/_l/blog')()

const DocsRoute = DocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const LRoute = LRouteImport.update({
  id: '/_l',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LBlogRoute = LBlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => LRoute,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)
const DocsLRoute = DocsLRouteImport.update({
  id: '/_l',
  getParentRoute: () => DocsRoute,
} as any)
const DocsLNotfoundRoute = DocsLNotfoundRouteImport.update({
  id: '/$notfound',
  path: '/$notfound',
  getParentRoute: () => DocsLRoute,
} as any)
const LBlogLRoute = LBlogLRouteImport.update({
  id: '/_l',
  getParentRoute: () => LBlogRoute,
} as any)
const LOnboardingExtensionIndexRoute =
  LOnboardingExtensionIndexRouteImport.update({
    id: '/onboarding/extension/',
    path: '/onboarding/extension/',
    getParentRoute: () => LRoute,
  } as any)
const LBlogLIndexRoute = LBlogLIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LBlogLRoute,
} as any)
const DocsLSectionSubsectionRoute = DocsLSectionSubsectionRouteImport.update({
  id: '/$section/$subsection',
  path: '/$section/$subsection',
  getParentRoute: () => DocsLRoute,
} as any)
const LBlogLSlugRoute = LBlogLSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => LBlogLRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LRouteWithChildren
  '/docs': typeof DocsLRouteWithChildren
  '/docs/': typeof DocsIndexRoute
  '/blog': typeof LBlogLRouteWithChildren
  '/docs/$notfound': typeof DocsLNotfoundRoute
  '/blog/$slug': typeof LBlogLSlugRoute
  '/docs/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/blog/': typeof LBlogLIndexRoute
  '/onboarding/extension': typeof LOnboardingExtensionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LRouteWithChildren
  '/docs': typeof DocsIndexRoute
  '/blog': typeof LBlogLIndexRoute
  '/docs/$notfound': typeof DocsLNotfoundRoute
  '/blog/$slug': typeof LBlogLSlugRoute
  '/docs/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/onboarding/extension': typeof LOnboardingExtensionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_l': typeof LRouteWithChildren
  '/docs': typeof DocsRouteWithChildren
  '/docs/_l': typeof DocsLRouteWithChildren
  '/docs/': typeof DocsIndexRoute
  '/_l/blog': typeof LBlogRouteWithChildren
  '/_l/blog/_l': typeof LBlogLRouteWithChildren
  '/docs/_l/$notfound': typeof DocsLNotfoundRoute
  '/_l/blog/_l/$slug': typeof LBlogLSlugRoute
  '/docs/_l/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/_l/blog/_l/': typeof LBlogLIndexRoute
  '/_l/onboarding/extension/': typeof LOnboardingExtensionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/docs'
    | '/docs/'
    | '/blog'
    | '/docs/$notfound'
    | '/blog/$slug'
    | '/docs/$section/$subsection'
    | '/blog/'
    | '/onboarding/extension'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/docs'
    | '/blog'
    | '/docs/$notfound'
    | '/blog/$slug'
    | '/docs/$section/$subsection'
    | '/onboarding/extension'
  id:
    | '__root__'
    | '/'
    | '/_l'
    | '/docs'
    | '/docs/_l'
    | '/docs/'
    | '/_l/blog'
    | '/_l/blog/_l'
    | '/docs/_l/$notfound'
    | '/_l/blog/_l/$slug'
    | '/docs/_l/$section/$subsection'
    | '/_l/blog/_l/'
    | '/_l/onboarding/extension/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LRoute: typeof LRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_l': {
      id: '/_l'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_l/blog': {
      id: '/_l/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LBlogRouteImport
      parentRoute: typeof LRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/_l': {
      id: '/docs/_l'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsLRouteImport
      parentRoute: typeof DocsRoute
    }
    '/docs/_l/$notfound': {
      id: '/docs/_l/$notfound'
      path: '/$notfound'
      fullPath: '/docs/$notfound'
      preLoaderRoute: typeof DocsLNotfoundRouteImport
      parentRoute: typeof DocsLRoute
    }
    '/_l/blog/_l': {
      id: '/_l/blog/_l'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LBlogLRouteImport
      parentRoute: typeof LBlogRoute
    }
    '/_l/onboarding/extension/': {
      id: '/_l/onboarding/extension/'
      path: '/onboarding/extension'
      fullPath: '/onboarding/extension'
      preLoaderRoute: typeof LOnboardingExtensionIndexRouteImport
      parentRoute: typeof LRoute
    }
    '/_l/blog/_l/': {
      id: '/_l/blog/_l/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof LBlogLIndexRouteImport
      parentRoute: typeof LBlogLRoute
    }
    '/docs/_l/$section/$subsection': {
      id: '/docs/_l/$section/$subsection'
      path: '/$section/$subsection'
      fullPath: '/docs/$section/$subsection'
      preLoaderRoute: typeof DocsLSectionSubsectionRouteImport
      parentRoute: typeof DocsLRoute
    }
    '/_l/blog/_l/$slug': {
      id: '/_l/blog/_l/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof LBlogLSlugRouteImport
      parentRoute: typeof LBlogLRoute
    }
  }
}

interface LBlogLRouteChildren {
  LBlogLSlugRoute: typeof LBlogLSlugRoute
  LBlogLIndexRoute: typeof LBlogLIndexRoute
}

const LBlogLRouteChildren: LBlogLRouteChildren = {
  LBlogLSlugRoute: LBlogLSlugRoute,
  LBlogLIndexRoute: LBlogLIndexRoute,
}

const LBlogLRouteWithChildren =
  LBlogLRoute._addFileChildren(LBlogLRouteChildren)

interface LBlogRouteChildren {
  LBlogLRoute: typeof LBlogLRouteWithChildren
}

const LBlogRouteChildren: LBlogRouteChildren = {
  LBlogLRoute: LBlogLRouteWithChildren,
}

const LBlogRouteWithChildren = LBlogRoute._addFileChildren(LBlogRouteChildren)

interface LRouteChildren {
  LBlogRoute: typeof LBlogRouteWithChildren
  LOnboardingExtensionIndexRoute: typeof LOnboardingExtensionIndexRoute
}

const LRouteChildren: LRouteChildren = {
  LBlogRoute: LBlogRouteWithChildren,
  LOnboardingExtensionIndexRoute: LOnboardingExtensionIndexRoute,
}

const LRouteWithChildren = LRoute._addFileChildren(LRouteChildren)

interface DocsLRouteChildren {
  DocsLNotfoundRoute: typeof DocsLNotfoundRoute
  DocsLSectionSubsectionRoute: typeof DocsLSectionSubsectionRoute
}

const DocsLRouteChildren: DocsLRouteChildren = {
  DocsLNotfoundRoute: DocsLNotfoundRoute,
  DocsLSectionSubsectionRoute: DocsLSectionSubsectionRoute,
}

const DocsLRouteWithChildren = DocsLRoute._addFileChildren(DocsLRouteChildren)

interface DocsRouteChildren {
  DocsLRoute: typeof DocsLRouteWithChildren
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsLRoute: DocsLRouteWithChildren,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LRoute: LRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
