/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LImport } from './routes/_l'
import { Route as IndexImport } from './routes/index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as DocsLImport } from './routes/docs/_l'
import { Route as DocsLNotfoundImport } from './routes/docs/_l.$notfound'
import { Route as LBlogLImport } from './routes/_l.blog/_l'
import { Route as LOnboardingExtensionIndexImport } from './routes/_l.onboarding/extension/index'
import { Route as LBlogLIndexImport } from './routes/_l.blog/_l.index'
import { Route as DocsLSectionSubsectionImport } from './routes/docs/_l.$section.$subsection'
import { Route as LBlogLSlugImport } from './routes/_l.blog/_l.$slug'

// Create Virtual Routes

const DocsImport = createFileRoute('/docs')()
const LBlogImport = createFileRoute('/_l/blog')()

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const LRoute = LImport.update({
  id: '/_l',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LBlogRoute = LBlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => LRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)

const DocsLRoute = DocsLImport.update({
  id: '/_l',
  getParentRoute: () => DocsRoute,
} as any)

const DocsLNotfoundRoute = DocsLNotfoundImport.update({
  id: '/$notfound',
  path: '/$notfound',
  getParentRoute: () => DocsLRoute,
} as any)

const LBlogLRoute = LBlogLImport.update({
  id: '/_l',
  getParentRoute: () => LBlogRoute,
} as any)

const LOnboardingExtensionIndexRoute = LOnboardingExtensionIndexImport.update({
  id: '/onboarding/extension/',
  path: '/onboarding/extension/',
  getParentRoute: () => LRoute,
} as any)

const LBlogLIndexRoute = LBlogLIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LBlogLRoute,
} as any)

const DocsLSectionSubsectionRoute = DocsLSectionSubsectionImport.update({
  id: '/$section/$subsection',
  path: '/$section/$subsection',
  getParentRoute: () => DocsLRoute,
} as any)

const LBlogLSlugRoute = LBlogLSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => LBlogLRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_l': {
      id: '/_l'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/docs/_l': {
      id: '/docs/_l'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsLImport
      parentRoute: typeof DocsRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof DocsImport
    }
    '/_l/blog': {
      id: '/_l/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LBlogImport
      parentRoute: typeof LImport
    }
    '/_l/blog/_l': {
      id: '/_l/blog/_l'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof LBlogLImport
      parentRoute: typeof LBlogRoute
    }
    '/docs/_l/$notfound': {
      id: '/docs/_l/$notfound'
      path: '/$notfound'
      fullPath: '/docs/$notfound'
      preLoaderRoute: typeof DocsLNotfoundImport
      parentRoute: typeof DocsLImport
    }
    '/_l/blog/_l/$slug': {
      id: '/_l/blog/_l/$slug'
      path: '/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof LBlogLSlugImport
      parentRoute: typeof LBlogLImport
    }
    '/docs/_l/$section/$subsection': {
      id: '/docs/_l/$section/$subsection'
      path: '/$section/$subsection'
      fullPath: '/docs/$section/$subsection'
      preLoaderRoute: typeof DocsLSectionSubsectionImport
      parentRoute: typeof DocsLImport
    }
    '/_l/blog/_l/': {
      id: '/_l/blog/_l/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof LBlogLIndexImport
      parentRoute: typeof LBlogLImport
    }
    '/_l/onboarding/extension/': {
      id: '/_l/onboarding/extension/'
      path: '/onboarding/extension'
      fullPath: '/onboarding/extension'
      preLoaderRoute: typeof LOnboardingExtensionIndexImport
      parentRoute: typeof LImport
    }
  }
}

// Create and export the route tree

interface LBlogLRouteChildren {
  LBlogLSlugRoute: typeof LBlogLSlugRoute
  LBlogLIndexRoute: typeof LBlogLIndexRoute
}

const LBlogLRouteChildren: LBlogLRouteChildren = {
  LBlogLSlugRoute: LBlogLSlugRoute,
  LBlogLIndexRoute: LBlogLIndexRoute,
}

const LBlogLRouteWithChildren =
  LBlogLRoute._addFileChildren(LBlogLRouteChildren)

interface LBlogRouteChildren {
  LBlogLRoute: typeof LBlogLRouteWithChildren
}

const LBlogRouteChildren: LBlogRouteChildren = {
  LBlogLRoute: LBlogLRouteWithChildren,
}

const LBlogRouteWithChildren = LBlogRoute._addFileChildren(LBlogRouteChildren)

interface LRouteChildren {
  LBlogRoute: typeof LBlogRouteWithChildren
  LOnboardingExtensionIndexRoute: typeof LOnboardingExtensionIndexRoute
}

const LRouteChildren: LRouteChildren = {
  LBlogRoute: LBlogRouteWithChildren,
  LOnboardingExtensionIndexRoute: LOnboardingExtensionIndexRoute,
}

const LRouteWithChildren = LRoute._addFileChildren(LRouteChildren)

interface DocsLRouteChildren {
  DocsLNotfoundRoute: typeof DocsLNotfoundRoute
  DocsLSectionSubsectionRoute: typeof DocsLSectionSubsectionRoute
}

const DocsLRouteChildren: DocsLRouteChildren = {
  DocsLNotfoundRoute: DocsLNotfoundRoute,
  DocsLSectionSubsectionRoute: DocsLSectionSubsectionRoute,
}

const DocsLRouteWithChildren = DocsLRoute._addFileChildren(DocsLRouteChildren)

interface DocsRouteChildren {
  DocsLRoute: typeof DocsLRouteWithChildren
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsLRoute: DocsLRouteWithChildren,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LRouteWithChildren
  '/docs': typeof DocsLRouteWithChildren
  '/docs/': typeof DocsIndexRoute
  '/blog': typeof LBlogLRouteWithChildren
  '/docs/$notfound': typeof DocsLNotfoundRoute
  '/blog/$slug': typeof LBlogLSlugRoute
  '/docs/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/blog/': typeof LBlogLIndexRoute
  '/onboarding/extension': typeof LOnboardingExtensionIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LRouteWithChildren
  '/docs': typeof DocsIndexRoute
  '/blog': typeof LBlogLIndexRoute
  '/docs/$notfound': typeof DocsLNotfoundRoute
  '/blog/$slug': typeof LBlogLSlugRoute
  '/docs/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/onboarding/extension': typeof LOnboardingExtensionIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_l': typeof LRouteWithChildren
  '/docs': typeof DocsRouteWithChildren
  '/docs/_l': typeof DocsLRouteWithChildren
  '/docs/': typeof DocsIndexRoute
  '/_l/blog': typeof LBlogRouteWithChildren
  '/_l/blog/_l': typeof LBlogLRouteWithChildren
  '/docs/_l/$notfound': typeof DocsLNotfoundRoute
  '/_l/blog/_l/$slug': typeof LBlogLSlugRoute
  '/docs/_l/$section/$subsection': typeof DocsLSectionSubsectionRoute
  '/_l/blog/_l/': typeof LBlogLIndexRoute
  '/_l/onboarding/extension/': typeof LOnboardingExtensionIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/docs'
    | '/docs/'
    | '/blog'
    | '/docs/$notfound'
    | '/blog/$slug'
    | '/docs/$section/$subsection'
    | '/blog/'
    | '/onboarding/extension'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/docs'
    | '/blog'
    | '/docs/$notfound'
    | '/blog/$slug'
    | '/docs/$section/$subsection'
    | '/onboarding/extension'
  id:
    | '__root__'
    | '/'
    | '/_l'
    | '/docs'
    | '/docs/_l'
    | '/docs/'
    | '/_l/blog'
    | '/_l/blog/_l'
    | '/docs/_l/$notfound'
    | '/_l/blog/_l/$slug'
    | '/docs/_l/$section/$subsection'
    | '/_l/blog/_l/'
    | '/_l/onboarding/extension/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LRoute: typeof LRouteWithChildren
  DocsRoute: typeof DocsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LRoute: LRouteWithChildren,
  DocsRoute: DocsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_l",
        "/docs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_l": {
      "filePath": "_l.tsx",
      "children": [
        "/_l/blog",
        "/_l/onboarding/extension/"
      ]
    },
    "/docs": {
      "filePath": "docs",
      "children": [
        "/docs/_l",
        "/docs/"
      ]
    },
    "/docs/_l": {
      "filePath": "docs/_l.tsx",
      "parent": "/docs",
      "children": [
        "/docs/_l/$notfound",
        "/docs/_l/$section/$subsection"
      ]
    },
    "/docs/": {
      "filePath": "docs/index.tsx",
      "parent": "/docs"
    },
    "/_l/blog": {
      "filePath": "_l.blog",
      "parent": "/_l",
      "children": [
        "/_l/blog/_l"
      ]
    },
    "/_l/blog/_l": {
      "filePath": "_l.blog/_l.tsx",
      "parent": "/_l/blog",
      "children": [
        "/_l/blog/_l/$slug",
        "/_l/blog/_l/"
      ]
    },
    "/docs/_l/$notfound": {
      "filePath": "docs/_l.$notfound.tsx",
      "parent": "/docs/_l"
    },
    "/_l/blog/_l/$slug": {
      "filePath": "_l.blog/_l.$slug.tsx",
      "parent": "/_l/blog/_l"
    },
    "/docs/_l/$section/$subsection": {
      "filePath": "docs/_l.$section.$subsection.tsx",
      "parent": "/docs/_l"
    },
    "/_l/blog/_l/": {
      "filePath": "_l.blog/_l.index.tsx",
      "parent": "/_l/blog/_l"
    },
    "/_l/onboarding/extension/": {
      "filePath": "_l.onboarding/extension/index.tsx",
      "parent": "/_l"
    }
  }
}
ROUTE_MANIFEST_END */
